# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: make mysql.yml
      run: |
        cd ./server/src/main/resources
        # db-connection.yml 파일 생성
        touch ./mysql.yml     

    - name: Create mysql.yml
      run: |
        echo "spring:" >> ./mysql.yml
        echo "  datasource:" >> ./mysql.yml
        echo "    url: jdbc:mysql://${DB_HOST}:3306/${DB_NAME}" >> ./mysql.yml
        echo "    username: ${DB_USER}" >> ./mysql.yml
        echo "    password: ${DB_PASSWORD}" >> ./mysql.yml
    
    - name: docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
        cd ./server
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/commerce .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/commerce

#배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker stop commerce && docker rm commerce && docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/commerce:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/commerce:latest
            docker run -d -p 8080:8080 --name commerce ${{ secrets.DOCKERHUB_USERNAME }}/commerce:latest
        
